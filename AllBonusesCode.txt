"""Вся обработка бонусов"""


def DrawBonusesTimeRing(sc, bonuses):
    """
    Отрисовка колец с оставшемся временем жизни бонусов

    Из блока "ВЫВОД ИНФОРМАЦИИ О ПРОЦЕССЕ ИГРЫ"
    """
    startCoords = (480, 420)
    size = 40
    percent2radian = lambda p: (1 / 2 + 2 * p) * math.pi
    for i in range(len(bonuses)):
        pygame.draw.arc(sc, Bolus.Settings[i][0],
                        (startCoords[0] + i * (size + 10), startCoords[1], size, size), math.pi / 2,
                        percent2radian(bonuses[i][1]), 5)




# ===================БОНУСЫ===============================
class Bolus(pygame.sprite.Sprite):
    # (GREEN, 1), (YELLOW, 2), (RED, 3), (BLUE, 4), (PURPLE, 5)
    # (Цвет, название эффекта, скорость падения)
    Settings = (
        ((70, 207, 100), 0, 5, 0.02 / 10),
        ((207, 70, 70), 1, 5, 0.02 / 20),
        ((208, 0, 255), 2, 5, 0.02 / 5),
        ((217, 214, 46), 3, 5, 0),
        ((0, 0, 0),))  # Настройки

    def __init__(self, coords, pack):  # Инициализация
        pygame.sprite.Sprite.__init__(self)
        self.color, self.effect, self.speed = Bolus.Settings[pack][:3]  # Настройки
        self.radius = 10
        self.image = pygame.Surface((self.radius * 2, self.radius * 2), pygame.SRCALPHA)
        self.rect = self.image.get_rect(center=coords)

    def draw(self, sc):  # Отрисовка
        WHITE = (255, 255, 255)
        BLACK = (0, 0, 0)
        sc.blit(self.image, self.rect)
        pygame.draw.circle(self.image, self.color, (self.radius, self.radius), self.radius)
        pygame.draw.circle(self.image, WHITE, (self.radius, self.radius), self.radius, 1)

    def update(self):
        if self.rect.top < 650:
            self.rect.y += self.speed
        else:
            self.kill()

""" Весь блок с бонусами"""


# ====================БОНУСЫ=========================
def UpdateBonus(bonuses):
    """ Обновление всех падающих в данный момент бонусов"""
    for bonus in bonuses:
        bonus.update()


def DrawBonus(sc, bonuses):
    """ Отрисовка всех падающих в данный момент бонусов"""
    for bonus in bonuses:
        bonus.draw(sc)


def GenerateBonusPack():
    """Генерация номера бонуса"""

    # Процентное распределение веросятности создания бонуса данного типа (сложности)
    lengthUp = 45  # %
    lowBallSpeed = 40  # %
    smashBall = 10  # %
    extraLive = 5
    points = [0, lengthUp / 100, (lengthUp + lowBallSpeed) / 100, (lengthUp + lowBallSpeed + smashBall) / 100,
              (lengthUp + lowBallSpeed + smashBall + extraLive) / 100]

    # Генецация мобов на основе процентного распределения веросятностей
    a = random.random()
    if points[0] < a <= points[1]:
        return 0
    elif points[1] < a <= points[2]:
        return 2
    elif points[2] < a <= points[3]:
        return 1
    elif points[3] < a <= points[4]:
        return 3

"""Из блока main, после задания игровых настроек, перед музыкой"""
    bonusesList = pygame.sprite.Group()  # Список с бонусами
    # bonusChance = 40  # % Появления бонуса
    addBonus = lambda x: True if 0 <= random.random() <= x / 100 else False
    bonuses = [[False, 0] for i in range(4)]
    print(bonuses)

"""Из блока, в котором обработка убийства моба"""

# bonusChance = 20 * mob.Fhardness # Шанс на выпадение бонуса при убийстве моба
bonusChance = 100
if addBonus(bonusChance):
    bonusesList.add(Bolus((mob.rect.centerx, mob.rect.bottom), GenerateBonusPack()))


"""Из основоного игрового цикла, перед выводом сообщений о выигрыше / проигрыше"""

UpdateBonus(bonusesList)

# ИСПРАВИТЬ СИСТЕМУ С БОНУСАМИ
for bonus in pygame.sprite.spritecollide(platform, bonusesList, True):
    bonuses[bonus.effect][1] = 1
    if not bonuses[bonus.effect][0]:
        bonuses[bonus.effect][0] = True
        if bonus.effect == 0:
            platform.effect = 1
        elif bonus.effect == 1:
            player.activeEffects[0] = True
        elif bonus.effect == 2:
            player.activeEffects[1] = True
        elif bonus.effect == 3:
            player.lives += 1
            bonuses[bonus.effect][0] = False
            bonuses[bonus.effect][1] = 0

for i in range(len(bonuses)):
    if abs(bonuses[i][1] - 0) > 0.01:
        bonuses[i][1] -= Bolus.Settings[i][3]
    else:
        bonuses[i][0] = False
        bonuses[i][1] = 0
        if i == 0:
            platform.effect = 0
        elif i == 1:
            player.activeEffects[0] = False
        elif i == 2:
            player.activeEffects[1] = False


"""Из основоного игрового цикла, из блока "Отрисовка всех элементов игры" """
DrawBonus(sc, bonusesList)
DrawBonusesTimeRing(sc, bonuses)